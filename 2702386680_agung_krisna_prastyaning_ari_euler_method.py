# -*- coding: utf-8 -*-
"""2702386680_Agung Krisna Prastyaning Ari_Euler_Method.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15jCybHYYqp5_0pTE66uvYG4ydHroGFxK
"""

import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

f = lambda t, s: np.exp(-t)
h = 0.1
t = np.arange(0, 1 + h, h)
s0 = -1

s = np.zeros(len(t))
s[0] = s0

for i in range(0, len(t) - 1):
  s[i + 1] = s[i] + h*f(t[i], s[i])

plt.figure(figsize = (12, 8))
plt.plot(t, s, 'bo--', label='Approximate')
plt.plot(t, -np.exp(-t), 'g', label='Exact')
plt.title('Approximate and solution \
for simple ODE')
plt.xlabel('t')
plt.ylabel('f(t)')
plt.grid()
plt.legend(loc='lower right')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')

# Define the ODE
f = lambda x, y: x**2 - 4*y # ODE
h = 0.1 # Step size
x = np.arange(0, 0.1 + h, h) # Numerical grid
y0 = 1 # Initial Condition

# Explicit Euler Method
y = np.zeros(len(x))
y[0] = y0

for i in range(0, len(x) - 1):
    y[i + 1] = y[i] + h * f(x[i], y[i])

# Print the value of y at x = 0.1
print(f"y(0.1) = {y[-1]}")

# Plotting the approximate solution
plt.figure(figsize = (12, 8))
plt.plot(x, y, 'bo--', label='Approximate')
plt.title('Approximate Solution using Euler Method')
plt.xlabel('x')
plt.ylabel('y')
plt.grid()
plt.legend(loc='lower right')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')
# %matplotlib inline

# Define parameters
f = lambda t, y: np.sin(y)  # ODE
h = 0.1  # Step size
t = np.arange(0, 0.5 + h, h)  # Numerical grid from 0 to 0.5
y0 = 1  # Initial Condition

# Explicit Euler Method
y = np.zeros(len(t))
y[0] = y0

for i in range(0, len(t) - 1):
    y[i + 1] = y[i] + h * f(t[i], y[i])

# Print the value of y at each step
for i in range(len(t)):
    print(f"y({t[i]}) = {y[i]}")

# Plotting the approximate solution
plt.figure(figsize=(12, 8))
plt.plot(t, y, 'bo--', label='Approximate')
plt.title('Approximate Solution using Euler Method for y\' = sin(y)')
plt.xlabel('t')
plt.ylabel('y(t)')
plt.grid()
plt.legend(loc='lower right')
plt.show()